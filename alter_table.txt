select * from ss_kfa_dev
alter table ss_generate_token
add access_token_kfa varchar(100);
alter table ss_generate_token
add expiry_token timestamp;
alter table ss_generate_token
add page_kfa int;



create table ss_jadwal(
id serial primary key,
kode varchar(100),
name varchar(200),
cron varchar(30),
command varchar(50),
status int,
created_at timestamp,
updated_at timestamp
);

insert into ss_jadwal(kode,name,cron,command,status)
select 'patient_job','Pasien','* * * * *', 'App\Http\Controllers\PatientController@runJob',0
union all
select 'practitioner_job','Praktisi','* * * * *', 'App\Http\Controllers\PractitionerController@runJob',0
union all
select 'bundle_job','Bundle','* * * * *', 'App\Http\Controllers\BundleController@runJob',0


create table ss_kfa_dev(
kode_kfa varchar(30),
nama_kfa varchar(200),
kode_pv varchar(30),
nama_pv varchar(200),
kode_pa varchar(30),
nama_pa varchar(200),
numerator float,
numerator_satuan varchar(10),
kode_sistem varchar(100),
denominator float,
denominator_satuan varchar(10),
denominator_penyesuaian float,
satuan_disesuaikan varchar(30),
bahan_baku_aktif varchar(100),
bahan_baku_aktif_kode varchar(100),
kode_sediaan varchar(100),
nama_sediaan varchar(100),
act_code varchar(100),
act_display varchar(100),
created_at timestamp,
updated_at timestamp
)

create table ss_sinkronisasi(
id serial primary key,
kode varchar(100),
description varchar(100),
command varchar(50),
query text,
odbc varchar(50),
target varchar(50),
status int,
record int,
part int,
page int,
upload int,
prefix varchar(50),
cron varchar(30),
process varchar(1),
sp varchar(30),
last_process timestamp,
created_at timestamp,
updated_at timestamp,
error_message varchar(200)
)


create table job_logs(
id serial primary key,
kode varchar(50),
status varchar(50),
start_date timestamp,
end_date timestamp,
error_message text,
action  varchar(100),
created_at timestamp,
updated_at timestamp
)

alter table ss_generate_token
add corporate varchar(40)


alter table ss_sinkronisasi
add tr_table int


alter table ss_location
ALTER COLUMN address TYPE text;


alter table ss_location
ALTER COLUMN city TYPE varchar(100);


alter table temp_encounter
add class_code varchar(30)

alter table temp_encounter
add class_code_display varchar(30)

create table ss_upload(
id serial primary key,
name varchar(100),
path varchar(200),
type varchar(50)
)


insert into ss_upload(
name,type
)
values('struktur_organization','pdf')



insert into ss_upload(
name,type
)
values('logo','png')

alter table ss_composition
add section_code varchar(100)
alter table ss_composition
add section_code_display varchar(100)

alter table ss_generate_token
add location_farmasi_id varchar(200)
alter table ss_generate_token
add location_farmasi_name varchar(200)


alter table ss_snomed
rename to ss_master_procedure

alter table temp_radiology
rename to temp_master_procedure

----------------------------------------------------------------

DROP FUNCTION IF EXISTS public.validasi_radiology();


CREATE OR REPLACE FUNCTION public.validasi_master_procedure(
	)
    RETURNS character varying
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
BEGIN

	--2. Insert ke patient jika belum ada di table pasien
	INSERT INTO ss_master_procedure(original_code,original_display,category,created_at)
	select a.original_code,a.original_display,a.category,now() from
	temp_master_procedure a
	left join
	ss_master_procedure b
	ON a.original_code = b.original_code
	WHERE b.id is null;

	return 'success';
END;
$BODY$;

ALTER FUNCTION public.validasi_master_procedure()
    OWNER TO postgres;

--------------------------------------------------

create table ss_snomed (
id serial primary key,
snomed_code varchar(100),
snomed_display varchar(200)
created_at timestamp,
updated_at timestamp
)


alter table ss_master_procedure
add loinc_code varchar(100)


alter table ss_master_procedure
add loinc_display varchar(100)

alter table ss_loinc
drop column original_code
alter table ss_loinc
drop column original_display

-------------------------------------------------------------
-- FUNCTION: public.validasi_composition()

-- DROP FUNCTION IF EXISTS public.validasi_composition();

CREATE OR REPLACE FUNCTION public.validasi_composition(
	)
    RETURNS character varying
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$

BEGIN
INSERT INTO ss_composition(original_code,encounter_original_code,type_code,type_display,category_code,category_display,subject_reference,subject_display,date,author_reference,author_display,title,text_status,text_div,satusehat_send,uuid, section_code, section_code_display)

SELECT composition.original_code,composition.encounter_original_code,'18842-5' as type_code,'Discharge summary' as type_display,'LP173421-1' as category_code,'Report' as category_display,
composition.subject_reference,composition.subject_display,composition.date,composition.participant_individual_reference,composition.participant_individual_display,case when composition.title = '' then '-' else composition.title end as title,
composition.text_status,composition.text_div,4 as satusehat_send,uuid_generate_v4() as uuid,composition.section_code, composition.section_code_display
FROM
(

    SELECT tbl_composition.*, ss_master_procedure.loinc_code as section_code, ss_master_procedure.loinc_display as section_code_display
    FROM
    (

        select temp_composition.*,ss_encounter.subject_reference,ss_encounter.subject_display,ss_encounter.participant_individual_reference,ss_encounter.participant_individual_display
        FROM temp_composition
        LEFT JOIN
        ss_encounter
        ON temp_composition.encounter_original_code = ss_encounter.original_code
	    WHERE ss_encounter.original_code is not null
	) as tbl_composition
	LEFT join
	ss_master_procedure
	ON tbl_composition.original_code = ss_master_procedure.original_code
	WHERE ss_master_procedure.id is not null
) as composition
LEFT JOIN
ss_composition
ON composition.encounter_original_code = ss_composition.encounter_original_code
WHERE ss_composition.encounter_original_code is null;

return 'success';
END;

$BODY$;

ALTER FUNCTION public.validasi_composition()
    OWNER TO postgres;

----------------------------------------------------------------

---service request

create table temp_service_request(
id serial primary key,
identifier_1 varchar(50),
identifier_2 varchar(50),
identifier_2_system varchar(50),
identifier_2_code varchar(50),
encounter_original_code varchar(100),
procedure_code_original varchar(100),
procedure_result varchar(100),
procedure_unit varchar(100),
procedure_interpretation varchar(100),
procedure_standart varchar(100),
encounter_display varchar(100),
category_code varchar(50),
category_display varchar(50),
coding_code varchar(50),
coding_display varchar(200),
coding_text varchar(200),
obs_category_code varchar(100),
obs_category_display varchar(100),
occurrence_datetime date,
authored_on date,
body_site_code varchar(50),
body_site_display varchar(50),
reason_text varchar(200)
)



create table ss_service_request(
id serial primary key,
satusehat_id varchar(100),
satusehat_id_specimen varchar(100),
satusehat_id_diagnostic_report varchar(100),
identifier_1 varchar(50),
identifier_2 varchar(50),
identifier_2_system varchar(50),
identifier_2_code varchar(50),
encounter_original_code varchar(100),
procedure_code_original varchar(100),
procedure_code varchar(100),
procedure_code_display varchar(100),
procedure_result varchar(100),
procedure_unit varchar(100),
procedure_interpretation varchar(100),
procedure_standart varchar(100),
loinc_code varchar(200),
loinc_display varchar(200),
snomed_code varchar(200),
snomed_display varchar(200),
encounter_display varchar(100),
subject_reference varchar(50),
subject_display varchar(200),
participant_individual_reference varchar(50),
participant_individual_display varchar(200),
category_code varchar(50),
category_display varchar(50),
coding_code varchar(50),
coding_display varchar(200),
coding_text varchar(200),
obs_category_code varchar(50),
obs_category_display varchar(50),
occurrence_datetime date,
authored_on date,
body_site_code varchar(50),
body_site_display varchar(50),
reason_text varchar(200),
satusehat_send int,
satusehat_date date,
satusehat_request text,
satusehat_response text,
satusehat_statuscode varchar(10),
satusehat_send_specimen int,
satusehat_date_specimen date,
satusehat_request_specimen text,
satusehat_response_specimen text,
satusehat_statuscode_specimen varchar(10),
satusehat_send_diagnostic_report int,
satusehat_date_diagnostic_report date,
satusehat_request_diagnostic_report text,
satusehat_response_diagnostic_report text,
satusehat_statuscode_diagnostic_report varchar(10),
created_at date,
updated_at date,
uuid varchar(200),
uuid_specimen varchar(200),
uuid_observation varchar(200),
uuid_diagnostic_report varchar(200)
)

-------------------------

CREATE OR REPLACE FUNCTION public.validasi_service_request(
	)
    RETURNS character varying
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
BEGIN

--insert dahulu

INSERT INTO ss_service_request(
identifier_1,
identifier_2,
identifier_2_system,
identifier_2_code,
encounter_original_code,
procedure_code_original,
procedure_code,
procedure_code_display,
procedure_result,
procedure_unit,
procedure_interpretation,
procedure_standart,
encounter_display,
category_code,
category_display,
coding_text,
obs_category_code,
obs_category_display,
occurrence_datetime,
authored_on,
body_site_code,
body_site_display,
reason_text,
subject_reference,
subject_display,
participant_individual_reference,
participant_individual_display,
loinc_code,
snomed_code,
loinc_display,
snomed_display,
coding_code,
coding_display,
procedure,
satusehat_send,satusehat_send_specimen,satusehat_send_diagnostic_report,
uuid,uuid_specimen, uuid_observation,uuid_diagnostic_report
)
SELECT
service.identifier_1,
service.identifier_2,
service.identifier_2_system,
service.identifier_2_code,
service.encounter_original_code,
service.procedure_code_original,
service.procedure_code,
service.procedure_code_display,
service.procedure_result,
service.procedure_unit,
service.procedure_interpretation,
service.procedure_standart,
service.encounter_display,
service.category_code,
service.category_display,
service.coding_text,
service.obs_category_code,
service.obs_category_display,
service.occurrence_datetime,
service.authored_on,
service.body_site_code,
service.body_site_display,
service.reason_text,
service.subject_reference,
service.subject_display,
service.participant_individual_reference,
service.participant_individual_display,
service.loinc_code,
service.snomed_code,
service.loinc_display,
service.snomed_display,
service.loinc_code,
service.loinc_display,
service.cat,
4 as satusehat_send,4 as satusehat_send_specimen,4 as satusehat_send_diagnostic_report,
uuid_generate_v4() as uuid,uuid_generate_v4() as uuid_specimen,uuid_generate_v4() as uuid_observation,uuid_generate_v4() as uuid_diagnostic_report
FROM
(

        SELECT service_loinc.*, ss_loinc.loinc_display,(select snomed_display FROM ss_snomed WHERE snomed_code = service_loinc.snomed_code) as snomed_display
        FROM
        (
            SELECT service.*,loinc_code, snomed_code,
            case
                when ss_master_procedure.category_request = 'GOLONGAN DARAH' then f_master_mapping_code(service.procedure_result)
                else ''
            end as procedure_code,
            case
                when ss_master_procedure.category_request = 'GOLONGAN DARAH' then f_master_mapping_code_display(service.procedure_result)
                else ''
            end as procedure_code_display,
            ss_master_procedure.category as cat
            FROM
            (
                SELECT
                service.*,
                encounter.subject_reference,
                encounter.subject_display,
                encounter.participant_individual_reference,
                encounter.participant_individual_display
                FROM
                temp_service_request service,
                ss_encounter encounter
                WHERE service.encounter_original_code = encounter.original_code
            ) as service
            JOIN
            ss_master_procedure
            ON service.procedure_code_original = ss_master_procedure.original_code
            WHERE ss_master_procedure.loinc_code is not null
            AND ss_master_procedure.category_request is not null
         ) as service_loinc
         JOIN ss_loinc
         ON service_loinc.loinc_code = ss_loinc.loinc_code
) as service
LEFT JOIN
ss_service_request
ON service.encounter_original_code = ss_service_request.encounter_original_code
WHERE ss_service_request.id is null;

--hapus dlu
--insert into ss_log_bridging(original_code,description, date, tab)
--select encounter_original_code,'Belum Ada Mapping Golongan Darah' as description,now(), 'ss_service_request' as tab from ss_service_request where procedure_result is not null AND procedure_code is null;
delete from ss_service_request where procedure_result is not null AND procedure_code is null;

--sudah bersih
INSERT INTO ss_observation (encounter_original_code,type_observation, status,category_code, category_display, code_observation,code_display,subject_reference,
performer_reference,encounter_display,effective_datetime,issued, quantity_value,quantity_unit,quantity_code,satusehat_send,uuid, subject_display, interpretation_code)
SELECT *
FROM(
    SELECT
    encounter_original_code,
    obs_category_display as type_observation,
    'final' as status,
    obs_category_code as category_code,
    obs_category_display as category_display,
    loinc_code as code_observation,
    loinc_display as code_display,
    subject_reference ,
    participant_individual_reference as performer_reference,
    '-' as encounter_display,
    occurrence_datetime as effective_datetime,
    authored_on as issued,
    case when procedure_code_display = '' then procedure_result else procedure_code_display end as quantity_value,
    case when procedure_code = '' then procedure_unit else procedure_code end  as quantity_unit,
    case when procedure_code = '' then procedure_unit else procedure_code end  as quantity_code,
    4 as satusehat_send,
    uuid_observation as uuid,
    subject_display,procedure_interpretation
    FROM ss_service_request where encounter_original_code IN(
    SELECT encounter_original_code FROM temp_service_request
    )
 ) as service_tab
 WHERE uuid NOT IN(
     SELECT uuid FROM ss_observation WHERE type_observation NOT IN('suhu','diastole','sistol','nadi','pernapasan')
 );



return 'success';
END;
$BODY$;

ALTER FUNCTION public.validasi_service_request()
OWNER TO postgres;
---------------------------

alter proc sp_master_tindakan_ss
as
select
pemeriksaan_id as original_code,
pemeriksaan_desc as original_display,
'lab' as category
from
lab_pemeriksaan


-----


alter table ss_snomed
add description varchar(255)

alter table ss_loinc
add description varchar(255)


create table ss_desc_resource(
    description varchar(200)
)
insert into ss_desc_resource(description) values('AllergyIntolerance.reaction.manifestation')
insert into ss_desc_resource(description) values('Observation.category.coding')
insert into ss_desc_resource(description) values('Observation.interpretation')
insert into ss_desc_resource(description) values('Specimen.type')
insert into ss_desc_resource(description) values('Specimen.collection.method.coding')
insert into ss_desc_resource(description) values('DiagnosticReport.category')
insert into ss_desc_resource(description) values('DiagnosticReport.category')
insert into ss_desc_resource(description) values('ServiceRequest.category')


-------
create table ss_master_mapping(
original_code varchar(100),
original_display varchar(100),
code varchar(100),
display varchar(100),
category varchar(100)
)

insert into ss_master_mapping(original_code,original_display,code,display, category)
select 'A','A','LA19710-5','Group A','GOLONGAN DARAH'
insert into ss_master_mapping(original_code,original_display,code,display, category)
select 'B','B','LA19709-7','Group O','GOLONGAN DARAH'
insert into ss_master_mapping(original_code,original_display,code,display, category)
select 'O','O','LA19708-9','ABO & Rh group','GOLONGAN DARAH'
insert into ss_master_mapping(original_code,original_display,code,display, category)
select 'AB','AB','LA28449-9','Group AB','GOLONGAN DARAH'
insert into ss_master_mapping(original_code,original_display,code,display, category)
select 'A/Rh (+)','A/Rh (+)','LP36683-8','ABO & Rh group','GOLONGAN DARAH'
insert into ss_master_mapping(original_code,original_display,code,display, category)
select 'O / Rh +','O / Rh +','LP36683-8','ABO & Rh group','GOLONGAN DARAH'
insert into ss_master_mapping(original_code,original_display,code,display, category)
select 'B / Rh +','B / Rh +','LP36683-8','ABO & Rh group','GOLONGAN DARAH'
------


CREATE OR REPLACE FUNCTION public.f_master_mapping_code_display(
	param_code varchar)
    RETURNS varchar
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    var_hasil varchar;
BEGIN

	var_hasil := (SELECT display FROM ss_master_mapping WHERE original_code = param_code LIMIT 1);

    return var_hasil ;
END;
$BODY$;

ALTER FUNCTION public.f_master_mapping_code_display(varchar)
    OWNER TO postgres;


------------

CREATE OR REPLACE FUNCTION public.f_master_mapping_code(
	param_code character varying)
    RETURNS character varying
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
DECLARE
    var_hasil varchar;
BEGIN

	var_hasil := (SELECT code FROM ss_master_mapping WHERE original_code = param_code LIMIT 1);

    return var_hasil ;
END;
$BODY$;

ALTER FUNCTION public.f_master_mapping_code(character varying)
    OWNER TO postgres;


---------------------

create table ss_category_request(
display varchar(100),
payload varchar(100),
field varchar(100),
diagnostic_report_code varchar(20),
diagnostic_report_display varchar(200)
)

INSERT INTO ss_category_request(display,payload,field) values('',null,null)
INSERT INTO ss_category_request(display,payload,field,diagnostic_report_code,diagnostic_report_display) values('GOLONGAN DARAH','$this->bodyBundleObservationLabGolonganDarah($param)','valueCodeableConcept','HM','Hematology')
INSERT INTO ss_category_request(display,payload,field,diagnostic_report_code,diagnostic_report_display) values('BTA','$this->bodyBundleObservationLabBta($param)','valueCodeableConcept','MB','Microbiology')
INSERT INTO ss_category_request(display,payload,field,diagnostic_report_code,diagnostic_report_display) values('KOLESTEROL','$this->bodyBundleObservationLabCekDarah($param)','valueQuantity','CH','Chemistry')


alter table ss_master_procedure
add category_request varchar(100)

----------------------------

alter table ss_generate_token
add laboratory_id varchar(255)



---END SUDAH DI DEPLOY DI RSUDC--- ALTER

--add
INSERT INTO ss_category_request(display,payload,field,diagnostic_report_code,diagnostic_report_display) values('DARAH RUTIN','$this->bodyBundleObservationLabCekDarah($param)','valueQuantity','HM','Hematology')
INSERT INTO ss_category_request(display,payload,field,diagnostic_report_code,diagnostic_report_display) values('DARAH LENGKAP','$this->bodyBundleObservationLabCekDarah($param)','valueQuantity','HM','Hematology')


ALTER TABLE ss_observation
ALTER COLUMN category_display TYPE text;

ALTER TABLE ss_observation
ALTER COLUMN code_display TYPE text;

--udpate ss_poli - bontang

create table temp_poli(
original_code varchar(20),
name varchar(255)
)


//UPDATE STORE PROCEDURE VALIDASI_SERVICE_REQUEST DI ATAS

CREATE OR REPLACE FUNCTION public.validasi_poli(
	)
    RETURNS character varying
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
BEGIN

	INSERT INTO ss_poli(original_code,name)
	select a.original_code, a.name from
	temp_poli a
	left join
	ss_poli b
	ON a.original_code = b.original_code
	WHERE b.id is null;

	return 'success';
END;
$BODY$;

ALTER FUNCTION public.validasi_poli()
    OWNER TO postgres;


------------------------
alter table ss_service_request
add procedure varchar(30)

UPDATE ss_service_request SET
procedure = 'lab'


ALTER PROCEDURE [DBA].[sp_master_tindakan_ss]
as
select
pemeriksaan_id as original_code,
pemeriksaan_desc as original_display,
'lab' as category
from
lab_pemeriksaan
union all
select
tindakan_id as original_code,
tindakan_desc as original_display,
'radiologi' as category
from master_tindakan
where tindakan_id IN('000941','000995','000977','000969','001088')

--update service request


ALTER TABLE ss_jadwal
ALTER COLUMN command TYPE VARCHAR(255);


insert into ss_jadwal(kode,name,cron,command,status)
select 'observation_job','Observation TTV','* * * * *', 'App\Http\Controllers\ObservationController@runJob',0
union all
select 'procedure_job','Procedure','* * * * *', 'App\Http\Controllers\ProcedureController@runJob',0
union all
select 'composition_job','Composition','* * * * *', 'App\Http\Controllers\CompositionController@runJob',0
union all
select 'medication_request_job','Medication Request','* * * * *', 'App\Http\Controllers\MedicationRequestController@runJob',0
union all
select 'medication_dispense_job','Medication Dispense','* * * * *', 'App\Http\Controllers\MedicationDispenseController@runJob',0
union all
select 'service_request_job','Service Request Lab','* * * * *', 'App\Http\Controllers\ServiceRequestController@runJob',0
union all
select 'observation_lab_job','Observation Lab','* * * * *', 'App\Http\Controllers\ObservationLabController@runJob',0
union all
select 'specimen_job','Speceimen Lab ','* * * * *', 'App\Http\Controllers\SpecimenController@runJob',0
union all
select 'diagnostic_report_job','Diagnostic Report Lab','* * * * *', 'App\Http\Controllers\DiagnosticReportController@runJob',0
union all
select 'service_request_radiology_job','Service Request Radiology','* * * * *', 'App\Http\Controllers\ServiceRequestRadiologyController@runJob',0

create table ss_bundle_set(
resource varchar(100),
description varchar(100),
status int
)

INSERT INTO ss_bundle_set(resource,description,status)
SELECT 'condition','Condition',0
union all
SELECT 'observation_ttv','Observation TTV',0
union all
SELECT 'procedure','Procedure',0
union all
SELECT 'composition','Composition',0
union all
SELECT 'medication','Medication Request & Medication Dispense' ,0
union all
SELECT 'service_request','Service Request Lab',0
union all
SELECT 'service_request_radiology','Service Request Radiology (Jangan di Centang)',0



ALTER TABLE temp_service_request
ALTER COLUMN reason_text SET DATA TYPE text;

ALTER TABLE ss_service_request
ALTER COLUMN reason_text SET DATA TYPE text;

--validasi service_request_radiologi

CREATE OR REPLACE FUNCTION public.validasi_service_request_radiology(
	)
    RETURNS character varying
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
BEGIN

--insert dahulu

INSERT INTO ss_service_request(
identifier_1,
identifier_2,
identifier_2_system,
identifier_2_code,
encounter_original_code,
procedure_code_original,
procedure_code,
procedure_code_display,
procedure_result,
procedure_unit,
procedure_interpretation,
procedure_standart,
encounter_display,
category_code,
category_display,
coding_text,
obs_category_code,
obs_category_display,
occurrence_datetime,
authored_on,
body_site_code,
body_site_display,
reason_text,
subject_reference,
subject_display,
participant_individual_reference,
participant_individual_display,
loinc_code,
snomed_code,
loinc_display,
snomed_display,
coding_code,
coding_display,
procedure,
satusehat_send,satusehat_send_specimen,satusehat_send_diagnostic_report,
uuid,uuid_specimen, uuid_observation,uuid_diagnostic_report
)
SELECT
service.identifier_1,
service.identifier_2,
service.identifier_2_system,
service.identifier_2_code,
service.encounter_original_code,
service.procedure_code_original,
service.procedure_code,
service.procedure_code_display,
service.procedure_result,
service.procedure_unit,
service.procedure_interpretation,
service.procedure_standart,
service.encounter_display,
service.category_code,
service.category_display,
service.coding_text,
service.obs_category_code,
service.obs_category_display,
service.occurrence_datetime,
service.authored_on,
service.body_site_code,
service.body_site_display,
service.reason_text,
service.subject_reference,
service.subject_display,
service.participant_individual_reference,
service.participant_individual_display,
service.loinc_code,
service.snomed_code,
service.loinc_display,
service.snomed_display,
service.loinc_code,
service.loinc_display,
service.cat,
4 as satusehat_send,4 as satusehat_send_specimen,4 as satusehat_send_diagnostic_report,
uuid_generate_v4() as uuid,uuid_generate_v4() as uuid_specimen,uuid_generate_v4() as uuid_observation,uuid_generate_v4() as uuid_diagnostic_report
FROM
(

        SELECT service_loinc.*, ss_loinc.loinc_display,(select snomed_display FROM ss_snomed WHERE snomed_code = service_loinc.snomed_code) as snomed_display
        FROM
        (
            SELECT service.*,loinc_code, snomed_code,
            case
                when ss_master_procedure.category_request = 'GOLONGAN DARAH' then f_master_mapping_code(service.procedure_result)
                else ''
            end as procedure_code,
            case
                when ss_master_procedure.category_request = 'GOLONGAN DARAH' then f_master_mapping_code_display(service.procedure_result)
                else ''
            end as procedure_code_display,
            ss_master_procedure.category as cat
            FROM
            (
                SELECT
                service.*,
                encounter.subject_reference,
                encounter.subject_display,
                encounter.participant_individual_reference,
                encounter.participant_individual_display
                FROM
                temp_service_request service,
                ss_encounter encounter
                WHERE service.encounter_original_code = encounter.original_code
            ) as service
            JOIN
            ss_master_procedure
            ON service.procedure_code_original = ss_master_procedure.original_code
            WHERE ss_master_procedure.loinc_code is not null

         ) as service_loinc
         JOIN ss_loinc
         ON service_loinc.loinc_code = ss_loinc.loinc_code
) as service
LEFT JOIN
ss_service_request
ON service.encounter_original_code = ss_service_request.encounter_original_code
WHERE ss_service_request.id is null;

--hapus dlu
--insert into ss_log_bridging(original_code,description, date, tab)
--select encounter_original_code,'Belum Ada Mapping Golongan Darah' as description,now(), 'ss_service_request' as tab from ss_service_request where procedure_result is not null AND procedure_code is null;
delete from ss_service_request where  procedure_code is null;

--sudah bersih
INSERT INTO ss_observation (encounter_original_code,type_observation, status,category_code, category_display, code_observation,code_display,subject_reference,
performer_reference,encounter_display,effective_datetime,issued, quantity_value,quantity_unit,quantity_code,satusehat_send,uuid, subject_display, interpretation_code)
SELECT *
FROM(
    SELECT
    encounter_original_code,
    obs_category_display as type_observation,
    'final' as status,
    obs_category_code as category_code,
    obs_category_display as category_display,
    loinc_code as code_observation,
    loinc_display as code_display,
    subject_reference ,
    participant_individual_reference as performer_reference,
    '-' as encounter_display,
    occurrence_datetime as effective_datetime,
    authored_on as issued,
    case when procedure_code_display = '' then procedure_result else procedure_code_display end as quantity_value,
    case when procedure_code = '' then procedure_unit else procedure_code end  as quantity_unit,
    case when procedure_code = '' then procedure_unit else procedure_code end  as quantity_code,
    4 as satusehat_send,
    uuid_observation as uuid,
    subject_display,procedure_interpretation
    FROM ss_service_request where encounter_original_code IN(
    SELECT encounter_original_code FROM temp_service_request
    )
 ) as service_tab
 WHERE uuid NOT IN(
     SELECT uuid FROM ss_observation WHERE type_observation NOT IN('suhu','diastole','sistol','nadi','pernapasan','Laboratory')
 );

return 'success';
END;
$BODY$;

ALTER FUNCTION public.validasi_service_request_radiology()
OWNER TO postgres;

---------------------


alter table ss_snomed
add code_system varchar(255)

alter table ss_loinc
add code_system varchar(255)

alter table ss_act
add code_system varchar(255)

alter table ss_act
add description varchar(255)

ALTER TABLE ss_act
ALTER COLUMN act_display
SET DATA TYPE text;

UPDATE ss_act set
code_system = 'https://www.whocc.no/atc_ddd_index/',
description = 'allergy'


ALTER TABLE ss_snomed
ALTER COLUMN snomed_display
SET DATA TYPE text;
---------------------------

create table ss_allergy_code(
id serial,
code varchar(30),
display varchar(255),
code_system varchar(255),
category varchar(100)
)


create table ss_master_allergy(
id serial,
code varchar(50),
display text,
code_satusehat varchar(50),
code_satusehat_display text,
code_system varchar(255),
category varchar(100)
)


INSERT MASTER ALLERGY


------------------



create table temp_allergy(
id serial,
 original_code varchar(30),
 encounter_original_code varchar(30),
 identifier_value varchar(30),
 clinical_code varchar(30),
 clinical_display varchar(30),
 verification_status_code varchar(30),
 verification_status_display varchar(30),
 code_original varchar(30),
 code_original_display varchar(255),
 text text,
 encounter_display varchar(255),
 recorded_date timestamp
)

create table ss_allergy(
id serial,
 original_code varchar(30),
 encounter_original_code varchar(30),
 satusehat_id varchar(255),
 identifier_value varchar(30),
 clinical_code varchar(30),
 clinical_display varchar(30),
 verification_status_code varchar(30),
 verification_status_display varchar(30),
 category varchar(50),
 coding_code varchar(30),
 coding_display varchar(255),
 text text,
 subject_reference varchar(50),
 subject_reference_display varchar(255),
 encounter_display varchar(255),
 recorded_date timestamp,
 recorder_reference varchar(30),
 satusehat_send int,
 satusehat_date timestamp,
 satusehat_request text,
 satusehat_response text,
 satusehat_statuscode varchar(30),
 created_at timestamp,
 updated_at timestamp,
 uuid varchar(255)
)


-----------------------------------------
-- FUNCTION: public.validasi_allergy()

-- DROP FUNCTION IF EXISTS public.validasi_allergy();

CREATE OR REPLACE FUNCTION public.validasi_allergy(
	)
    RETURNS character varying
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
BEGIN
	INSERT INTO ss_allergy(encounter_original_code,identifier_value,clinical_code,clinical_display,
	verification_status_code,verification_status_display,category,coding_code,coding_display,
	text,subject_reference,subject_reference_display,encounter_display,recorded_date,recorder_reference,
	satusehat_send,uuid)

	SELECT allergy_2.encounter_original_code, allergy_2.identifier_value,allergy_2.clinical_code,allergy_2.clinical_display,
	allergy_2.verification_status_code,allergy_2.verification_status_display,allergy_2.category,allergy_2.code_satusehat as coding_code,allergy_2.code_satusehat_display as coding_display,
	allergy_2.text,allergy_2.subject_reference,allergy_2.subject_display as subject_reference_display,
	allergy_2.encounter_display,allergy_2.recorded_date,
	allergy_2.recorder_reference,4,
	uuid_generate_v4()
	FROM
	(
		select allergy.*,ss_encounter.subject_reference,ss_encounter.subject_display, participant_individual_reference as recorder_reference
		FROM
		(
			SELECT a.*, b.code_satusehat, b.code_satusehat_display,b.category FROM
			temp_allergy a , ss_master_allergy b
			WHERE a.code_original = b.code
			AND b.code_satusehat is not null
            AND b.category is not null
		) as allergy
		join
		ss_encounter
		ON allergy.encounter_original_code = ss_encounter.original_code
	) as allergy_2
	LEFT JOIN
	ss_allergy
	ON concat(allergy_2.encounter_original_code,allergy_2.identifier_value) = concat(ss_allergy.encounter_original_code,ss_allergy.identifier_value)
	WHERE ss_allergy.encounter_original_code is null;

	return 'success';
END;
$BODY$;

ALTER FUNCTION public.validasi_allergy()
    OWNER TO postgres;


---------------
INSERT INTO ss_bundle_set(resource,description,status)
SELECT 'allergy','Allergy',0


insert into ss_jadwal(kode,name,cron,command,status)
select 'allergy_job','Allergy','* * * * *', 'App\Http\Controllers\AllergyController@runJob',0
---------------------------------------



//prognosis

create table ss_prognosis_code(
id serial,
code varchar(30),
display varchar(255),
code_system varchar(255)
)

insert into ss_prognosis_code(code,display,code_system) values('PR000001','Prognosis baik','https://terminology.kemkes.go.id/CodeSystem/clinical-term')
insert into ss_prognosis_code(code,display,code_system) values('PR000002','Prognosis dubiaet bonam /Cenderung Baik','https://terminology.kemkes.go.id/CodeSystem/clinical-term')
insert into ss_prognosis_code(code,display,code_system) values('PR000003','Prognosis dubiaet malam / cenderung tidak baik','https://terminology.kemkes.go.id/CodeSystem/clinical-term')
insert into ss_prognosis_code(code,display,code_system) values('PR000004','Prognosis tidak baik','https://terminology.kemkes.go.id/CodeSystem/clinical-term')

create table ss_master_prognosis(
id serial,
code varchar(50),
display text,
code_satusehat varchar(50),
code_satusehat_display text,
code_system varchar(255)
)



create table temp_prognosis(
 id serial,
 original_code varchar(30),
 encounter_original_code varchar(30),
 identifier_value varchar(30),
 status varchar(30),
 description text,
 encounter_display varchar(50),
 effective_datetime timestamp,
 date timestamp,
 summary text,
 code_original varchar(50),
 code_original_display varchar(255)
)


create table ss_prognosis(
 id serial,
 original_code varchar(30),
 encounter_original_code varchar(30),
 identifier_value varchar(30),
 status varchar(30),
 description text,
 subject_reference varchar(50),
 subject_display varchar(100),
 encounter_display varchar(50),
 effective_datetime timestamp,
 date timestamp,
 assessor_reference varchar(50),
 summary text,
 satusehat_send int,
 satusehat_date timestamp,
 satusehat_request text,
 satusehat_response text,
 satusehat_statuscode varchar(30),
 created_at timestamp,
 updated_at timestamp,
 uuid varchar(255)
)


CREATE OR REPLACE FUNCTION public.validasi_prognosis(
	)
    RETURNS character varying
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
BEGIN
	INSERT INTO ss_prognosis(encounter_original_code,identifier_value,status,description,subject_reference,subject_display,
	encounter_display,effective_datetime,date,assessor_reference,summary,coding_code,coding_display,satusehat_send,uuid)

	SELECT prognosis_2.encounter_original_code, prognosis_2.identifier_value,prognosis_2.status,prognosis_2.description,
	prognosis_2.subject_reference,prognosis_2.subject_display as subject_display,
	prognosis_2.encounter_display,prognosis_2.effective_datetime,prognosis_2.date,prognosis_2.assessor_reference,prognosis_2.summary,
	prognosis_2.code_satusehat as coding_code,prognosis_2.code_satusehat_display as coding_display,4 satusehat_send,uuid_generate_v4() as uuid
	FROM
	(
		select prognosis.*,ss_encounter.subject_reference,ss_encounter.subject_display, participant_individual_reference as assessor_reference
		FROM
		(
			SELECT a.*, b.code_satusehat, b.code_satusehat_display FROM
			temp_prognosis a , ss_master_prognosis b
			WHERE a.code_original = b.code
			AND b.code_satusehat is not null
		) as prognosis
		join
		ss_encounter
		ON prognosis.encounter_original_code = ss_encounter.original_code
	) as prognosis_2
	LEFT JOIN
	ss_prognosis
	ON concat(prognosis_2.encounter_original_code,prognosis_2.identifier_value) = concat(ss_prognosis.encounter_original_code,ss_prognosis.identifier_value)
	WHERE ss_prognosis.encounter_original_code is null;

	return 'success';
END;
$BODY$;

ALTER FUNCTION public.validasi_prognosis()
    OWNER TO postgres;



INSERT INTO ss_bundle_set(resource,description,status)
SELECT 'prognosis','Prognosis',0


insert into ss_jadwal(kode,name,cron,command,status)
select 'prognosis_job','Prognosis','* * * * *', 'App\Http\Controllers\PrognosisController@runJob',0

insert into ss_jadwal(kode,name,cron,command,status)
select 'condition_job','Condition','* * * * *', 'App\Http\Controllers\ConditionController@runJob',0


//revisi medication dispense
-- FUNCTION: public.validasi_medication_dispense()

-- DROP FUNCTION IF EXISTS public.validasi_medication_dispense();
--

create table temp_master_allergy(
code varchar(100),
display varchar(255)
)


----
-- FUNCTION: public.validasi_master_allergy()

-- DROP FUNCTION IF EXISTS public.validasi_master_allergy();

CREATE OR REPLACE FUNCTION public.validasi_master_allergy(
	)
    RETURNS character varying
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$
BEGIN

    DROP TABLE IF EXISTS temp_master_xyz;
	CREATE TEMPORARY TABLE temp_master_xyz AS
	SELECT t1.code, t1.display, t2.code as code_satusehat, t2.display as code_satusehat_display, t2.code_system, t2.category
	FROM
	(
        SELECT a.code, a.display
        FROM
        temp_master_allergy a
        LEFT JOIN
        ss_master_allergy b
        ON a.code = b.code
        WHERE b.id IS NULL
    ) as t1
    JOIN ss_allergy_code t2
    ON t1.display ILIKE '%' || t2.display || '%'
    OR t2.display ILIKE '%' || t1.display || '%';

    INSERT INTO ss_master_allergy(code,display,code_satusehat,code_satusehat_display,code_system,category)
    SELECT *
    FROM
    (
    select *,
    (select code_satusehat FROM temp_master_xyz WHERE temp_master_xyz.code = temp_master_allergy.code ORDER by code_satusehat ASC LIMIT 1 ),
    (select code_satusehat_display FROM temp_master_xyz WHERE temp_master_xyz.code = temp_master_allergy.code ORDER by code_satusehat ASC LIMIT 1 ),
    (select code_system FROM temp_master_xyz WHERE temp_master_xyz.code = temp_master_allergy.code ORDER by code_satusehat ASC LIMIT 1 ),
    (select category FROM temp_master_xyz WHERE temp_master_xyz.code = temp_master_allergy.code ORDER by code_satusehat ASC LIMIT 1 )
    from temp_master_allergy
    ) as TAB_FINAL WHERE code_satusehat is not null
    AND category is not null;

	return 'success';
END;
$BODY$;

ALTER FUNCTION public.validasi_master_allergy()
    OWNER TO postgres;


------------------
-- FUNCTION: public.validasi_composition()

-- DROP FUNCTION IF EXISTS public.validasi_composition();

CREATE OR REPLACE FUNCTION public.validasi_composition(
	)
    RETURNS character varying
    LANGUAGE 'plpgsql'
    COST 100
    VOLATILE PARALLEL UNSAFE
AS $BODY$

BEGIN
INSERT INTO ss_composition(original_code,encounter_original_code,type_code,type_display,category_code,category_display,subject_reference,subject_display,date,author_reference,author_display,title,text_status,text_div,satusehat_send,uuid, section_code, section_code_display)

SELECT composition.original_code,composition.encounter_original_code,'18842-5' as type_code,'Discharge summary' as type_display,'LP173421-1' as category_code,'Report' as category_display,
composition.subject_reference,composition.subject_display,composition.date,composition.participant_individual_reference,composition.participant_individual_display,composition.title,
composition.text_status,composition.text_div,4 as satusehat_send,uuid_generate_v4() as uuid,composition.section_code, composition.section_code_display
FROM
(

    SELECT tbl_composition.*, ss_master_procedure.loinc_code as section_code, ss_master_procedure.loinc_display as section_code_display
    FROM
    (

        select temp_composition.*,ss_encounter.subject_reference,ss_encounter.subject_display,ss_encounter.participant_individual_reference,ss_encounter.participant_individual_display
        FROM temp_composition
        LEFT JOIN
        ss_encounter
        ON temp_composition.encounter_original_code = ss_encounter.original_code
	    WHERE ss_encounter.original_code is not null
	) as tbl_composition
	LEFT join
	ss_master_procedure
	ON tbl_composition.original_code = ss_master_procedure.original_code
	WHERE ss_master_procedure.id is not null
) as composition
LEFT JOIN
ss_composition
ON composition.encounter_original_code = ss_composition.encounter_original_code
WHERE ss_composition.encounter_original_code is null;

return 'success';
END;

$BODY$;

ALTER FUNCTION public.validasi_composition()
    OWNER TO postgres;
